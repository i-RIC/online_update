# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

import numpy as np
from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _iric
else:
    import _iric

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)

def _checkErrorCode(ier):
    if ier == 0: return

    raise Exception('Error code ier={0}'.format(ier))

CG_MODE_READ = 0
CG_MODE_WRITE = 1
CG_MODE_MODIFY = 2

IRIC_OPTION_CANCEL = 1

class IntArrayContainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size):
        _iric.IntArrayContainer_swiginit(self, _iric.new_IntArrayContainer(size))
    __swig_destroy__ = _iric.delete_IntArrayContainer

    def size(self):
        return _iric.IntArrayContainer_size(self)

    def value(self, index):
        return _iric.IntArrayContainer_value(self, index)

    def setValue(self, index, v):
        return _iric.IntArrayContainer_setValue(self, index, v)

    def pointer(self):
        return _iric.IntArrayContainer_pointer(self)

    def get(self):
        ret = np.zeros(self.size(), dtype=np.int32)
        for i in range(self.size()):
            ret[i] = self.value(i)
        return ret

    def set(self, vals):
        for i in range(self.size()):
            self.setValue(i, int(vals[i]))

# Register IntArrayContainer in _iric:
_iric.IntArrayContainer_swigregister(IntArrayContainer)

class RealArrayContainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, size):
        _iric.RealArrayContainer_swiginit(self, _iric.new_RealArrayContainer(size))
    __swig_destroy__ = _iric.delete_RealArrayContainer

    def size(self):
        return _iric.RealArrayContainer_size(self)

    def value(self, index):
        return _iric.RealArrayContainer_value(self, index)

    def setValue(self, index, v):
        return _iric.RealArrayContainer_setValue(self, index, v)

    def pointer(self):
        return _iric.RealArrayContainer_pointer(self)

    def get(self):
        ret = np.zeros(self.size(), dtype=np.float64)
        for i in range(self.size()):
            ret[i] = self.value(i)
        return ret

    def set(self, vals):
        for i in range(self.size()):
            self.setValue(i, float(vals[i]))

# Register RealArrayContainer in _iric:
_iric.RealArrayContainer_swigregister(RealArrayContainer)


def cg_open(name, mode):
    ier, fid = _iric.cg_open(name, mode)
    _checkErrorCode(ier)
    return fid

def cg_close(fin):
    ier = _iric.cg_close(fin)
    _checkErrorCode(ier)

def cg_error_print():
    return _iric.cg_error_print()

def cg_iRIC_Init(fid):
    ier = _iric.cg_iRIC_Init(fid)
    _checkErrorCode(ier)

def cg_iRIC_InitRead_Base(fid, basename):
    ier = _iric.cg_iRIC_InitRead_Base(fid, basename)
    _checkErrorCode(ier)

def cg_iRIC_InitRead(fid):
    ier = _iric.cg_iRIC_InitRead(fid)
    _checkErrorCode(ier)

def cg_iRIC_SetFilename(fid, fname):
    ier = _iric.cg_iRIC_SetFilename(fid, fname)
    _checkErrorCode(ier)

def iRIC_InitOption(option):
    ier = _iric.iRIC_InitOption(option)
    _checkErrorCode(ier)

def cg_iRIC_Set_ZoneId_Mul(fid, zoneid):
    ier = _iric.cg_iRIC_Set_ZoneId_Mul(fid, zoneid)
    _checkErrorCode(ier)

def cg_iRIC_Flush(name, fid_in):
    ier, fid_out = _iric.cg_iRIC_Flush(name, fid_in)
    _checkErrorCode(ier)
    return fid_out

def iRIC_Check_Cancel():
    return _iric.iRIC_Check_Cancel()

def cg_iRIC_Read_Integer_Mul(fid, name):
    ier, val = _iric.cg_iRIC_Read_Integer_Mul(fid, name)
    _checkErrorCode(ier)
    return val

def cg_iRIC_Read_Real_Mul(fid, name):
    ier, val = _iric.cg_iRIC_Read_Real_Mul(fid, name)
    _checkErrorCode(ier)
    return val

def cg_iRIC_Read_String_Mul(fid, name):
    ier, val = _iric.cg_iRIC_Read_String_Mul(fid, name)
    _checkErrorCode(ier)
    return val

def cg_iRIC_Read_FunctionalSize_Mul(fid, name):
    ier, val = _iric.cg_iRIC_Read_FunctionalSize_Mul(fid, name)
    _checkErrorCode(ier)
    return val

def cg_iRIC_Read_FunctionalWithName_String_Mul(fid, name, paramname):
    ier, val = _iric.cg_iRIC_Read_FunctionalWithName_String_Mul(fid, name, paramname)
    _checkErrorCode(ier)
    return val

def cg_iRIC_Read_Functional_Mul(fid, name):
    size = cg_iRIC_Read_FunctionalSize_Mul(fid, name)
    x = RealArrayContainer(size)
    y = RealArrayContainer(size)

    ier = _iric.cg_iRIC_Read_Functional_Mul(fid, name, x, y)
    _checkErrorCode(ier)
    return (x.get(), y.get())

def cg_iRIC_Read_FunctionalWithName_Mul(fid, name, paramname):
    size = cg_iRIC_Read_FunctionalSize_Mul(fid, name)
    data = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_FunctionalWithName_Mul(fid, name, paramname, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Write_Integer_Mul(fid, name, intvalue):
    ier = _iric.cg_iRIC_Write_Integer_Mul(fid, name, intvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_Real_Mul(fid, name, realvalue):
    ier = _iric.cg_iRIC_Write_Real_Mul(fid, name, realvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_String_Mul(fid, name, strvalue):
    ier = _iric.cg_iRIC_Write_String_Mul(fid, name, strvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_FunctionalWithName_String_Mul(fid, groupname, name, strvalue):
    ier = _iric.cg_iRIC_Write_FunctionalWithName_String_Mul(fid, groupname, name, strvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_Functional_Mul(fid, name, realarray_x, realarray_y):
    x = RealArrayContainer(realarray_x.size)
    y = RealArrayContainer(realarray_y.size)
    x.set(realarray_x)
    y.set(realarray_y)

    ier = _iric.cg_iRIC_Write_Functional_Mul(fid, name, x, y)
    _checkErrorCode(ier)

def cg_iRIC_Write_FunctionalWithName_Mul(fid, name, paramname, data):
    d = RealArrayContainer(data.size)
    d.set(data)
    ier = _iric.cg_iRIC_Write_FunctionalWithName_Mul(fid, name, paramname, d)
    _checkErrorCode(ier)

def cg_iRIC_Read_Complex_Count_Mul(fid, groupname):
    ier, count = _iric.cg_iRIC_Read_Complex_Count_Mul(fid, groupname)
    _checkErrorCode(ier)
    return count

def cg_iRIC_Read_Complex_Integer_Mul(fid, groupname, num, name):
    ier, value = _iric.cg_iRIC_Read_Complex_Integer_Mul(fid, groupname, num, name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_Complex_Real_Mul(fid, groupname, num, name):
    ier, value = _iric.cg_iRIC_Read_Complex_Real_Mul(fid, groupname, num, name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_Complex_String_Mul(fid, groupname, num, name):
    ier, value = _iric.cg_iRIC_Read_Complex_String_Mul(fid, groupname, num, name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_Complex_FunctionalSize_Mul(fid, groupname, num, name):
    ier, size = _iric.cg_iRIC_Read_Complex_FunctionalSize_Mul(fid, groupname, num, name)
    _checkErrorCode(ier)
    return size

def cg_iRIC_Read_Complex_Functional_Mul(fid, groupname, num, name):
    size = cg_iRIC_Read_Complex_FunctionalSize_Mul(fid, groupname, num, name)
    x = RealArrayContainer(size)
    y = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Complex_Functional_Mul(fid, groupname, num, name, x, y)
    _checkErrorCode(ier)
    return (x.get(), y.get())

def cg_iRIC_Read_Complex_FunctionalWithName_Mul(fid, groupname, num, name, paramname):
    size = cg_iRIC_Read_Complex_FunctionalSize_Mul(fid, groupname, num, name)
    data = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Complex_FunctionalWithName_Mul(fid, groupname, num, name, paramname, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_Complex_FunctionalWithName_String_Mul(fid, groupname, num, name, paramname):
    ier, value = _iric.cg_iRIC_Read_Complex_FunctionalWithName_String_Mul(fid, groupname, num, name, paramname)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_Grid_Complex_Node_Mul(fid, groupname):
    count = cg_iRIC_Read_Grid_NodeCount_Mul(fid)
    data = IntArrayContainer(count)

    ier = _iric.cg_iRIC_Read_Grid_Complex_Node_Mul(fid, groupname, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_Grid_Complex_Cell_Mul(fid, groupname):
    count = cg_iRIC_Read_Grid_CellCount_Mul(fid)
    data = IntArrayContainer(count)

    ier = _iric.cg_iRIC_Read_Grid_Complex_Cell_Mul(fid, groupname, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Clear_Complex_Mul(fid):
    ier = _iric.cg_iRIC_Clear_Complex_Mul(fid)
    _checkErrorCode(ier)

def cg_iRIC_Write_Complex_Integer_Mul(fid, groupname, num, name, intvalue):
    ier = _iric.cg_iRIC_Write_Complex_Integer_Mul(fid, groupname, num, name, intvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_Complex_Real_Mul(fid, groupname, num, name, realvalue):
    ier = _iric.cg_iRIC_Write_Complex_Real_Mul(fid, groupname, num, name, realvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_Complex_String_Mul(fid, groupname, num, name, strvalue):
    ier = _iric.cg_iRIC_Write_Complex_String_Mul(fid, groupname, num, name, strvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_Complex_Functional_Mul(fid, groupname, num, name, realarray_x, realarray_y):
    x = RealArrayContainer(realarray_x.size)
    y = RealArrayContainer(realarray_y.size)
    x.set(realarray_x)
    y.set(realarray_y)

    ier = _iric.cg_iRIC_Write_Complex_Functional_Mul(fid, groupname, num, name, x, y)
    _checkErrorCode(ier)

def cg_iRIC_Write_Complex_FunctionalWithName_Mul(fid, groupname, num, name, paramname, data):
    d = RealArrayContainer(data.size)
    d.set(data)
    ier = _iric.cg_iRIC_Write_Complex_FunctionalWithName_Mul(fid, groupname, num, name, paramname, d)
    _checkErrorCode(ier)

def cg_iRIC_Write_Complex_FunctionalWithName_String_Mul(fid, groupname, num, name, paramname, strvalue):
    ier = _iric.cg_iRIC_Write_Complex_FunctionalWithName_String_Mul(fid, groupname, num, name, paramname, strvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_Grid_Complex_Node_Mul(fid, groupname, values):
    d = IntArrayContainer(values.size)
    d.set(values)
    ier = _iric.cg_iRIC_Write_Grid_Complex_Node_Mul(fid, groupname, d)
    _checkErrorCode(ier)

def cg_iRIC_Write_Grid_Complex_Cell_Mul(fid, groupname, values):
    d = IntArrayContainer(values.size)
    d.set(values)
    ier = _iric.cg_iRIC_Write_Grid_Complex_Cell_Mul(fid, groupname, d)
    _checkErrorCode(ier)

def cg_iRIC_GotoGridCoord2d_Mul(fid):
    ier, isize, jsize = _iric.cg_iRIC_GotoGridCoord2d_Mul(fid)
    _checkErrorCode(ier)
    return (isize, jsize)

def cg_iRIC_GetGridCoord2d_Mul(fid):
    count = cg_iRIC_Read_Grid_NodeCount_Mul(fid)
    x = RealArrayContainer(count)
    y = RealArrayContainer(count)

    ier = _iric.cg_iRIC_GetGridCoord2d_Mul(fid, x, y)
    _checkErrorCode(ier)
    return (x.get(), y.get())

def cg_iRIC_GotoGridCoord3d_Mul(fid):
    ier, isize, jsize, ksize = _iric.cg_iRIC_GotoGridCoord3d_Mul(fid)
    _checkErrorCode(ier)
    return (isize, jsize, ksize)

def cg_iRIC_GetGridCoord3d_Mul(fid):
    count = cg_iRIC_Read_Grid_NodeCount_Mul(fid)
    x = RealArrayContainer(count)
    y = RealArrayContainer(count)
    z = RealArrayContainer(count)

    ier = _iric.cg_iRIC_GetGridCoord3d_Mul(fid, x, y, z)
    _checkErrorCode(ier)
    return (x.get(), y.get(), z.get())

def cg_iRIC_Read_Grid_NodeCount_Mul(fid):
    ier, count = _iric.cg_iRIC_Read_Grid_NodeCount_Mul(fid)
    _checkErrorCode(ier)
    return count

def cg_iRIC_Read_Grid_CellCount_Mul(fid):
    ier, count = _iric.cg_iRIC_Read_Grid_CellCount_Mul(fid)
    _checkErrorCode(ier)
    return count

def cg_iRIC_Read_Grid_IFaceCount_Mul(fid):
    ier, count = _iric.cg_iRIC_Read_Grid_IFaceCount_Mul(fid)
    _checkErrorCode(ier)
    return count

def cg_iRIC_Read_Grid_JFaceCount_Mul(fid):
    ier, count = _iric.cg_iRIC_Read_Grid_JFaceCount_Mul(fid)
    _checkErrorCode(ier)
    return count

def cg_iRIC_Read_Grid_Real_Node_Mul(fid, name):
    count = cg_iRIC_Read_Grid_NodeCount_Mul(fid)
    values = RealArrayContainer(count)
    ier = _iric.cg_iRIC_Read_Grid_Real_Node_Mul(fid, name, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_Integer_Node_Mul(fid, name):
    count = cg_iRIC_Read_Grid_NodeCount_Mul(fid)
    values = IntArrayContainer(count)
    ier = _iric.cg_iRIC_Read_Grid_Integer_Node_Mul(fid, name, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_Real_Cell_Mul(fid, name):
    count = cg_iRIC_Read_Grid_CellCount_Mul(fid)
    values = RealArrayContainer(count)
    ier = _iric.cg_iRIC_Read_Grid_Real_Cell_Mul(fid, name, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_Integer_Cell_Mul(fid, name):
    count = cg_iRIC_Read_Grid_CellCount_Mul(fid)
    values = IntArrayContainer(count)
    ier = _iric.cg_iRIC_Read_Grid_Integer_Cell_Mul(fid, name, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_FunctionalDimensionSize_Mul(fid, name, dimname):
    ier, size = _iric.cg_iRIC_Read_Grid_FunctionalDimensionSize_Mul(fid, name, dimname)
    _checkErrorCode(ier)
    return size

def cg_iRIC_Read_Grid_FunctionalDimension_Integer_Mul(fid, name, dimname):
    size = cg_iRIC_Read_Grid_FunctionalDimensionSize_Mul(fid, name, dimname)
    values = IntArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Grid_FunctionalDimension_Integer_Mul(fid, name, dimname, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_FunctionalDimension_Real_Mul(fid, name, dimname):
    size = cg_iRIC_Read_Grid_FunctionalDimensionSize_Mul(fid, name, dimname)
    values = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Grid_FunctionalDimension_Real_Mul(fid, name, dimname, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_FunctionalTimeSize_Mul(fid, name):
    ier, size = _iric.cg_iRIC_Read_Grid_FunctionalTimeSize_Mul(fid, name)
    _checkErrorCode(ier)
    return size

def cg_iRIC_Read_Grid_FunctionalTime_Mul(fid, name):
    size = cg_iRIC_Read_Grid_FunctionalTimeSize_Mul(fid, name)
    values = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Grid_FunctionalTime_Mul(fid, name, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_Functional_Integer_Node_Mul(fid, name, dimid):
    count = cg_iRIC_Read_Grid_NodeCount_Mul(fid)
    values = IntArrayContainer(count)
    ier = _iric.cg_iRIC_Read_Grid_Functional_Integer_Node_Mul(fid, name, dimid, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_Functional_Real_Node_Mul(fid, name, dimid):
    count = cg_iRIC_Read_Grid_NodeCount_Mul(fid)
    values = RealArrayContainer(count)
    ier = _iric.cg_iRIC_Read_Grid_Functional_Real_Node_Mul(fid, name, dimid, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_Functional_Integer_Cell_Mul(fid, name, dimid):
    count = cg_iRIC_Read_Grid_CellCount_Mul(fid)
    values = IntArrayContainer(count)
    ier = _iric.cg_iRIC_Read_Grid_Functional_Integer_Cell_Mul(fid, name, dimid, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_Functional_Real_Cell_Mul(fid, name, dimid):
    count = cg_iRIC_Read_Grid_CellCount_Mul(fid)
    values = RealArrayContainer(count)
    ier = _iric.cg_iRIC_Read_Grid_Functional_Real_Cell_Mul(fid, name, dimid, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_WriteGridCoord1d_Mul(fid, isize, x):
    v = RealArrayContainer(x.size)
    v.set(x)
    ier = _iric.cg_iRIC_WriteGridCoord1d_Mul(fid, isize, v)
    _checkErrorCode(ier)

def cg_iRIC_WriteGridCoord2d_Mul(fid, isize, jsize, x, y):
    x2 = RealArrayContainer(x.size)
    y2 = RealArrayContainer(y.size)
    x2.set(x)
    y2.set(y)
    ier = _iric.cg_iRIC_WriteGridCoord2d_Mul(fid, isize, jsize, x2, y2)
    _checkErrorCode(ier)

def cg_iRIC_WriteGridCoord3d_Mul(fid, isize, jsize, ksize, x, y, z):
    x2 = RealArrayContainer(x.size)
    y2 = RealArrayContainer(y.size)
    z2 = RealArrayContainer(z.size)
    x2.set(x)
    y2.set(y)
    z2.set(z)
    ier = _iric.cg_iRIC_WriteGridCoord3d_Mul(fid, isize, jsize, ksize, x2, y2, z2)
    _checkErrorCode(ier)

def cg_iRIC_InitGrid_Mul(fid, zoneId):
    ier = _iric.cg_iRIC_InitGrid_Mul(fid, zoneId)
    _checkErrorCode(ier)

def cg_iRIC_Write_Grid_Real_Node_Mul(fid, name, values):
    v = RealArrayContainer(values.size)
    v.set(values)
    ier = _iric.cg_iRIC_Write_Grid_Real_Node_Mul(fid, name, v)
    _checkErrorCode(ier)

def cg_iRIC_Write_Grid_Integer_Node_Mul(fid, name, values):
    v = IntArrayContainer(values.size)
    v.set(values)
    ier = _iric.cg_iRIC_Write_Grid_Integer_Node_Mul(fid, name, v)
    _checkErrorCode(ier)

def cg_iRIC_Write_Grid_Real_Cell_Mul(fid, name, values):
    v = RealArrayContainer(values.size)
    v.set(values)
    ier = _iric.cg_iRIC_Write_Grid_Real_Cell_Mul(fid, name, v)
    _checkErrorCode(ier)

def cg_iRIC_Write_Grid_Integer_Cell_Mul(fid, name, values):
    v = IntArrayContainer(values.size)
    v.set(values)
    ier = _iric.cg_iRIC_Write_Grid_Integer_Cell_Mul(fid, name, v)
    _checkErrorCode(ier)

def cg_iRIC_Read_Sol_Count_Mul(fid):
    ier, count = _iric.cg_iRIC_Read_Sol_Count_Mul(fid)
    _checkErrorCode(ier)
    return count

def cg_iRIC_Read_Sol_Time_Mul(fid, step):
    ier, value = _iric.cg_iRIC_Read_Sol_Time_Mul(fid, step)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_Sol_Iteration_Mul(fid, step):
    ier, value = _iric.cg_iRIC_Read_Sol_Iteration_Mul(fid, step)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_Sol_BaseIterative_Integer_Mul(fid, step, name):
    ier, value = _iric.cg_iRIC_Read_Sol_BaseIterative_Integer_Mul(fid, step, name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_Sol_BaseIterative_Real_Mul(fid, step, name):
    ier, value = _iric.cg_iRIC_Read_Sol_BaseIterative_Real_Mul(fid, step, name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_Sol_BaseIterative_String_Mul(fid, step, name):
    ier, value = _iric.cg_iRIC_Read_Sol_BaseIterative_String_Mul(fid, step, name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_Sol_GridCoord2d_Mul(fid, step):
    size = cg_iRIC_Read_Grid_NodeCount_Mul(fid)
    x = RealArrayContainer(size)
    y = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_GridCoord2d_Mul(fid, step, x, y)
    _checkErrorCode(ier)
    return (x.get(), y.get())

def cg_iRIC_Read_Sol_GridCoord3d_Mul(fid, step):
    size = cg_iRIC_Read_Grid_NodeCount_Mul(fid)
    x = RealArrayContainer(size)
    y = RealArrayContainer(size)
    z = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_GridCoord3d_Mul(fid, step, x, y, z)
    _checkErrorCode(ier)
    return (x.get(), y.get(), z.get())

def cg_iRIC_Read_Sol_Integer_Mul(fid, step, name):
    size = cg_iRIC_Read_Grid_NodeCount_Mul(fid)
    data = IntArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_Integer_Mul(fid, step, name, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_Sol_Cell_Integer_Mul(fid, step, name):
    size = cg_iRIC_Read_Grid_CellCount_Mul(fid)
    data = IntArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_Cell_Integer_Mul(fid, step, name, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_Sol_IFace_Integer_Mul(fid, step, name):
    size = cg_iRIC_Read_Grid_IFaceCount_Mul(fid)
    data = IntArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_IFace_Integer_Mul(fid, step, name, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_Sol_JFace_Integer_Mul(fid, step, name):
    size = cg_iRIC_Read_Grid_JFaceCount_Mul(fid)
    data = IntArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_JFace_Integer_Mul(fid, step, name, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_Sol_Real_Mul(fid, step, name):
    size = cg_iRIC_Read_Grid_NodeCount_Mul(fid)
    data = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_Real_Mul(fid, step, name, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_Sol_Cell_Real_Mul(fid, step, name):
    size = cg_iRIC_Read_Grid_CellCount_Mul(fid)
    data = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_Cell_Real_Mul(fid, step, name, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_Sol_IFace_Real_Mul(fid, step, name):
    size = cg_iRIC_Read_Grid_IFaceCount_Mul(fid)
    data = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_IFace_Real_Mul(fid, step, name, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_Sol_JFace_Real_Mul(fid, step, name):
    size = cg_iRIC_Read_Grid_JFaceCount_Mul(fid)
    data = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_JFace_Real_Mul(fid, step, name, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Write_Sol_Time_Mul(fid, time):
    ier = _iric.cg_iRIC_Write_Sol_Time_Mul(fid, time)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_Iteration_Mul(fid, index):
    ier = _iric.cg_iRIC_Write_Sol_Iteration_Mul(fid, index)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_BaseIterative_Integer_Mul(fid, name, value):
    ier = _iric.cg_iRIC_Write_Sol_BaseIterative_Integer_Mul(fid, name, value)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_BaseIterative_Real_Mul(fid, name, value):
    ier = _iric.cg_iRIC_Write_Sol_BaseIterative_Real_Mul(fid, name, value)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_BaseIterative_String_Mul(fid, name, strvalue):
    ier = _iric.cg_iRIC_Write_Sol_BaseIterative_String_Mul(fid, name, strvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_GridCoord2d_Mul(fid, x, y):
    x2 = RealArrayContainer(x.size)
    y2 = RealArrayContainer(y.size)
    x2.set(x)
    y2.set(y)
    ier = _iric.cg_iRIC_Write_Sol_GridCoord2d_Mul(fid, x2, y2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_GridCoord3d_Mul(fid, x, y, z):
    x2 = RealArrayContainer(x.size)
    y2 = RealArrayContainer(y.size)
    z2 = RealArrayContainer(z.size)
    x2.set(x)
    y2.set(y)
    z2.set(z)
    ier = _iric.cg_iRIC_Write_Sol_GridCoord3d_Mul(fid, x2, y2, z2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_Integer_Mul(fid, name, data):
    data2 = IntArrayContainer(data.size)
    data2.set(data)
    ier = _iric.cg_iRIC_Write_Sol_Integer_Mul(fid, name, data2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_Cell_Integer_Mul(fid, name, data):
    data2 = IntArrayContainer(data.size)
    data2.set(data)
    ier = _iric.cg_iRIC_Write_Sol_Cell_Integer_Mul(fid, name, data2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_IFace_Integer_Mul(fid, name, data):
    data2 = IntArrayContainer(data.size)
    data2.set(data)
    ier = _iric.cg_iRIC_Write_Sol_IFace_Integer_Mul(fid, name, data2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_JFace_Integer_Mul(fid, name, data):
    data2 = IntArrayContainer(data.size)
    data2.set(data)
    ier = _iric.cg_iRIC_Write_Sol_JFace_Integer_Mul(fid, name, data2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_Real_Mul(fid, name, data):
    data2 = RealArrayContainer(data.size)
    data2.set(data)
    ier = _iric.cg_iRIC_Write_Sol_Real_Mul(fid, name, data2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_Cell_Real_Mul(fid, name, data):
    data2 = RealArrayContainer(data.size)
    data2.set(data)
    ier = _iric.cg_iRIC_Write_Sol_Cell_Real_Mul(fid, name, data2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_IFace_Real_Mul(fid, name, data):
    data2 = RealArrayContainer(data.size)
    data2.set(data)
    ier = _iric.cg_iRIC_Write_Sol_IFace_Real_Mul(fid, name, data2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_JFace_Real_Mul(fid, name, data):
    data2 = RealArrayContainer(data.size)
    data2.set(data)
    ier = _iric.cg_iRIC_Write_Sol_JFace_Real_Mul(fid, name, data2)
    _checkErrorCode(ier)

def cg_iRIC_Write_ErrorCode_Mul(fid, errorcode):
    ier = _iric.cg_iRIC_Write_ErrorCode_Mul(fid, errorcode)
    _checkErrorCode(ier)

def cg_iRIC_Init_BC_Names_Mul(fid):
    ier = _iric.cg_iRIC_Init_BC_Names_Mul(fid)
    _checkErrorCode(ier)

def cg_iRIC_Read_BC_Count_Mul(fid, type):
    return _iric.cg_iRIC_Read_BC_Count_Mul(fid, type)

def cg_iRIC_Read_BC_IndicesSize2_Mul(fid, type, num):
    ier, size = _iric.cg_iRIC_Read_BC_IndicesSize2_Mul(fid, type, num)
    _checkErrorCode(ier)
    return size

def cg_iRIC_Read_BC_Indices_Mul(fid, type, num):
    size = cg_iRIC_Read_BC_IndicesSize2_Mul(fid, type, num)
    indices = IntArrayContainer(size)
    ier = _iric.cg_iRIC_Read_BC_Indices_Mul(fid, type, num, indices)
    _checkErrorCode(ier)
    return indices.get()

def cg_iRIC_Read_BC_Integer_Mul(fid, type, num, name):
    ier, value = _iric.cg_iRIC_Read_BC_Integer_Mul(fid, type, num, name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_BC_Real_Mul(fid, type, num, name):
    ier, value = _iric.cg_iRIC_Read_BC_Real_Mul(fid, type, num, name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_BC_String_Mul(fid, type, num, name):
    ier, value = _iric.cg_iRIC_Read_BC_String_Mul(fid, type, num, name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_BC_FunctionalSize_Mul(fid, type, num, name):
    ier, size = _iric.cg_iRIC_Read_BC_FunctionalSize_Mul(fid, type, num, name)
    _checkErrorCode(ier)
    return size

def cg_iRIC_Read_BC_Functional_Mul(fid, type, num, name):
    size = cg_iRIC_Read_BC_FunctionalSize_Mul(fid, type, num, name)
    x = RealArrayContainer(size)
    y = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_BC_Functional_Mul(fid, type, num, name, x, y)
    _checkErrorCode(ier)
    return (x.get(), y.get())

def cg_iRIC_Read_BC_FunctionalWithName_Mul(fid, type, num, name, paramname):
    size = cg_iRIC_Read_BC_FunctionalSize_Mul(fid, type, num, name)
    data = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_BC_FunctionalWithName_Mul(fid, type, num, name, paramname, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_BC_FunctionalWithName_String_Mul(fid, type, num, name, paramname):
    ier, value = _iric.cg_iRIC_Read_BC_FunctionalWithName_String_Mul(fid, type, num, name, paramname)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Clear_BC_Mul(fid):
    ier = _iric.cg_iRIC_Clear_BC_Mul(fid)
    _checkErrorCode(ier)

def cg_iRIC_Write_BC_Indices_Mul(fid, type, num, indices):
    d = IntArrayContainer(indices.size)
    d.set(indices)
    ier = _iric.cg_iRIC_Write_BC_Indices_Mul(fid, type, num, d)
    _checkErrorCode(ier)

def cg_iRIC_Write_BC_Integer_Mul(fid, type, num, name, intvalue):
    ier = _iric.cg_iRIC_Write_BC_Integer_Mul(fid, type, num, name, intvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_BC_Real_Mul(fid, type, num, name, realvalue):
    ier = _iric.cg_iRIC_Write_BC_Real_Mul(fid, type, num, name, realvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_BC_String_Mul(fid, type, num, name, strvalue):
    ier = _iric.cg_iRIC_Write_BC_String_Mul(fid, type, num, name, strvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_BC_Functional_Mul(fid, type, num, name, realarray_x, realarray_y):
    x = RealArrayContainer(realarray_x.size)
    y = RealArrayContainer(realarray_y.size)
    x.set(realarray_x)
    y.set(realarray_y)
    ier = _iric.cg_iRIC_Write_BC_Functional_Mul(fid, type, num, name, x, y)
    _checkErrorCode(ier)

def cg_iRIC_Write_BC_FunctionalWithName_Mul(fid, type, num, name, paramname, data):
    d = RealArrayContainer(data.size)
    d.set(data)
    ier = _iric.cg_iRIC_Write_BC_FunctionalWithName_Mul(fid, type, num, name, paramname, d)
    _checkErrorCode(ier)

def cg_iRIC_Write_BC_FunctionalWithName_String_Mul(fid, type, num, name, paramname, strvalue):
    ier = _iric.cg_iRIC_Write_BC_FunctionalWithName_String_Mul(fid, type, num, name, paramname, strvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_Particle_Pos2d_Mul(fid, x, y):
    x2 = RealArrayContainer(x.size)
    y2 = RealArrayContainer(y.size)
    x2.set(x)
    y2.set(y)
    ier = _iric.cg_iRIC_Write_Sol_Particle_Pos2d_Mul(fid, x2, y2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_Particle_Pos3d_Mul(fid, x, y, z):
    x2 = RealArrayContainer(x.size)
    y2 = RealArrayContainer(y.size)
    z2 = RealArrayContainer(z.size)
    x2.set(x)
    y2.set(y)
    z2.set(z)
    ier = _iric.cg_iRIC_Write_Sol_Particle_Pos3d_Mul(fid, x2, y2, z2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_Particle_Real_Mul(fid, name, value):
    value2 = RealArrayContainer(value.size)
    value2.set(value)
    ier = _iric.cg_iRIC_Write_Sol_Particle_Real_Mul(fid, name, value2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_Particle_Integer_Mul(fid, name, value):
    value2 = IntArrayContainer(value.size)
    value2.set(value)
    ier = _iric.cg_iRIC_Write_Sol_Particle_Integer_Mul(fid, name, value2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_ParticleGroup_GroupBegin_Mul(fid, name):
    ier = _iric.cg_iRIC_Write_Sol_ParticleGroup_GroupBegin_Mul(fid, name)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_ParticleGroup_GroupEnd_Mul(fid):
    ier = _iric.cg_iRIC_Write_Sol_ParticleGroup_GroupEnd_Mul(fid)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_ParticleGroup_Pos2d_Mul(fid, x, y):
    ier = _iric.cg_iRIC_Write_Sol_ParticleGroup_Pos2d_Mul(fid, x, y)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_ParticleGroup_Pos3d_Mul(fid, x, y, z):
    ier = _iric.cg_iRIC_Write_Sol_ParticleGroup_Pos3d_Mul(fid, x, y, z)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_ParticleGroup_Integer_Mul(fid, name, value):
    ier = _iric.cg_iRIC_Write_Sol_ParticleGroup_Integer_Mul(fid, name, value)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_ParticleGroup_Real_Mul(fid, name, value):
    ier = _iric.cg_iRIC_Write_Sol_ParticleGroup_Real_Mul(fid, name, value)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_PolyData_GroupBegin_Mul(fid, name):
    ier = _iric.cg_iRIC_Write_Sol_PolyData_GroupBegin_Mul(fid, name)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_PolyData_GroupEnd_Mul(fid):
    ier = _iric.cg_iRIC_Write_Sol_PolyData_GroupEnd_Mul(fid)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_PolyData_Polygon_Mul(fid, x, y):
    x2 = RealArrayContainer(x.size)
    y2 = RealArrayContainer(y.size)
    x2.set(x)
    y2.set(y)
    ier = _iric.cg_iRIC_Write_Sol_PolyData_Polygon_Mul(fid, x2, y2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_PolyData_Polyline_Mul(fid, x, y):
    x2 = RealArrayContainer(x.size)
    y2 = RealArrayContainer(y.size)
    x2.set(x)
    y2.set(y)
    ier = _iric.cg_iRIC_Write_Sol_PolyData_Polyline_Mul(fid, x2, y2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_PolyData_Integer_Mul(fid, name, value):
    ier = _iric.cg_iRIC_Write_Sol_PolyData_Integer_Mul(fid, name, value)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_PolyData_Real_Mul(fid, name, value):
    ier = _iric.cg_iRIC_Write_Sol_PolyData_Real_Mul(fid, name, value)
    _checkErrorCode(ier)




def cg_iRIC_Set_ZoneId(zoneid):
    ier = _iric.cg_iRIC_Set_ZoneId(zoneid)
    _checkErrorCode(ier)

def cg_iRIC_Read_Integer(name):
    ier, value = _iric.cg_iRIC_Read_Integer(name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_Real(name):
    ier, value = _iric.cg_iRIC_Read_Real(name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_String(name):
    ier, value = _iric.cg_iRIC_Read_String(name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_FunctionalSize(name):
    ier, size = _iric.cg_iRIC_Read_FunctionalSize(name)
    _checkErrorCode(ier)
    return size

def cg_iRIC_Read_FunctionalWithName_String(name, paramname):
    ier, value = _iric.cg_iRIC_Read_FunctionalWithName_String(name, paramname)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_Functional(name):
    size = cg_iRIC_Read_FunctionalSize(name)
    x = RealArrayContainer(size)
    y = RealArrayContainer(size)

    ier = _iric.cg_iRIC_Read_Functional(name, x, y)
    _checkErrorCode(ier)
    return (x.get(), y.get())

def cg_iRIC_Read_FunctionalWithName(name, paramname):
    size = cg_iRIC_Read_FunctionalSize(name)
    data = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_FunctionalWithName(name, paramname, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Write_Integer(name, intvalue):
    ier = _iric.cg_iRIC_Write_Integer(name, intvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_Real(name, realvalue):
    ier = _iric.cg_iRIC_Write_Real(name, realvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_String(name, strvalue):
    ier = _iric.cg_iRIC_Write_String(name, strvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_FunctionalWithName_String(groupname, name, strvalue):
    ier = _iric.cg_iRIC_Write_FunctionalWithName_String(groupname, name, strvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_Functional(name, realarray_x, realarray_y):
    x = RealArrayContainer(realarray_x.size)
    y = RealArrayContainer(realarray_y.size)
    x.set(realarray_x)
    y.set(realarray_y)
    ier = _iric.cg_iRIC_Write_Functional(name, x, y)
    _checkErrorCode(ier)

def cg_iRIC_Write_FunctionalWithName(name, paramname, data):
    d = RealArrayContainer(data.size)
    d.set(data)
    ier = _iric.cg_iRIC_Write_FunctionalWithName(name, paramname, d)
    _checkErrorCode(ier)

def cg_iRIC_Read_Complex_Count(groupname):
    ier, count = _iric.cg_iRIC_Read_Complex_Count(groupname)
    _checkErrorCode(ier)
    return count

def cg_iRIC_Read_Complex_Integer(groupname, num, name):
    ier, value = _iric.cg_iRIC_Read_Complex_Integer(groupname, num, name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_Complex_Real(groupname, num, name):
    ier, value = _iric.cg_iRIC_Read_Complex_Real(groupname, num, name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_Complex_String(groupname, num, name):
    ier, value = _iric.cg_iRIC_Read_Complex_String(groupname, num, name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_Complex_FunctionalSize(groupname, num, name):
    ier, size = _iric.cg_iRIC_Read_Complex_FunctionalSize(groupname, num, name)
    _checkErrorCode(ier)
    return size

def cg_iRIC_Read_Complex_Functional(groupname, num, name):
    size = cg_iRIC_Read_Complex_FunctionalSize(groupname, num, name)
    x = RealArrayContainer(size)
    y = RealArrayContainer(size)

    ier = _iric.cg_iRIC_Read_Complex_Functional(groupname, num, name, x, y)
    _checkErrorCode(ier)
    return (x.get(), y.get())

def cg_iRIC_Read_Complex_FunctionalWithName(groupname, num, name, paramname):
    size = cg_iRIC_Read_Complex_FunctionalSize(groupname, num, name)
    data = RealArrayContainer(size)

    ier = _iric.cg_iRIC_Read_Complex_FunctionalWithName(groupname, num, name, paramname, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_Complex_FunctionalWithName_String(groupname, num, name, paramname):
    ier, value = _iric.cg_iRIC_Read_Complex_FunctionalWithName_String(groupname, num, name, paramname)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_Grid_Complex_Node(groupname):
    count = cg_iRIC_Read_Grid_NodeCount()
    data = IntArrayContainer(count)

    ier = _iric.cg_iRIC_Read_Grid_Complex_Node(groupname, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_Grid_Complex_Cell(groupname):
    count = cg_iRIC_Read_Grid_CellCount()
    data = IntArrayContainer(count)

    ier = _iric.cg_iRIC_Read_Grid_Complex_Cell(groupname, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Clear_Complex():
    ier = _iric.cg_iRIC_Clear_Complex()
    _checkErrorCode(ier)

def cg_iRIC_Write_Complex_Integer(groupname, num, name, intvalue):
    ier = _iric.cg_iRIC_Write_Complex_Integer(groupname, num, name, intvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_Complex_Real(groupname, num, name, realvalue):
    ier = _iric.cg_iRIC_Write_Complex_Real(groupname, num, name, realvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_Complex_String(groupname, num, name, strvalue):
    ier = _iric.cg_iRIC_Write_Complex_String(groupname, num, name, strvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_Complex_Functional(groupname, num, name, realarray_x, realarray_y):
    x = RealArrayContainer(realarray_x.size)
    y = RealArrayContainer(realarray_y.size)
    x.set(realarray_x)
    y.set(realarray_y)
    ier = _iric.cg_iRIC_Write_Complex_Functional(groupname, num, name, x, y)
    _checkErrorCode(ier)

def cg_iRIC_Write_Complex_FunctionalWithName(groupname, num, name, paramname, data):
    d = RealArrayContainer(data.size)
    d.set(data)
    ier = _iric.cg_iRIC_Write_Complex_FunctionalWithName(groupname, num, name, paramname, d)
    _checkErrorCode(ier)

def cg_iRIC_Write_Complex_FunctionalWithName_String(groupname, num, name, paramname, strvalue):
    ier = _iric.cg_iRIC_Write_Complex_FunctionalWithName_String(groupname, num, name, paramname, strvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_Grid_Complex_Node(groupname, values):
    d = IntArrayContainer(values.size)
    d.set(values)
    ier = _iric.cg_iRIC_Write_Grid_Complex_Node(groupname, d)
    _checkErrorCode(ier)

def cg_iRIC_Write_Grid_Complex_Cell(groupname, values):
    d = IntArrayContainer(values.size)
    d.set(values)
    ier = _iric.cg_iRIC_Write_Grid_Complex_Cell(groupname, d)
    _checkErrorCode(ier)

def cg_iRIC_GotoGridCoord2d():
    ier, isize, jsize = _iric.cg_iRIC_GotoGridCoord2d()
    _checkErrorCode(ier)
    return (isize, jsize)

def cg_iRIC_GetGridCoord2d():
    count = cg_iRIC_Read_Grid_NodeCount()
    x = RealArrayContainer(count)
    y = RealArrayContainer(count)
    ier = _iric.cg_iRIC_GetGridCoord2d(x, y)
    _checkErrorCode(ier)
    return x.get(), y.get()

def cg_iRIC_GotoGridCoord3d():
    ier, isize, jsize, ksize = _iric.cg_iRIC_GotoGridCoord3d()
    _checkErrorCode(ier)
    return (isize, jsize, ksize)

def cg_iRIC_GetGridCoord3d():
    count = _iric.cg_iRIC_Read_Grid_NodeCount()
    x = RealArrayContainer(count)
    y = RealArrayContainer(count)
    z = RealArrayContainer(count)

    ier = _iric.cg_iRIC_GetGridCoord3d(x, y, z)
    _checkErrorCode(ier)
    return (x.get(), y.get(), z.get())

def cg_iRIC_Read_Grid_NodeCount():
    ier, count =_iric.cg_iRIC_Read_Grid_NodeCount()
    _checkErrorCode(ier)
    return count

def cg_iRIC_Read_Grid_CellCount():
    ier, count = _iric.cg_iRIC_Read_Grid_CellCount()
    _checkErrorCode(ier)
    return count

def cg_iRIC_Read_Grid_IFaceCount():
    ier, count = _iric.cg_iRIC_Read_Grid_IFaceCount()
    _checkErrorCode(ier)
    return count

def cg_iRIC_Read_Grid_JFaceCount():
    ier, count = _iric.cg_iRIC_Read_Grid_JFaceCount()
    _checkErrorCode(ier)
    return count

def cg_iRIC_Read_Grid_Real_Node(name):
    count = cg_iRIC_Read_Grid_NodeCount()
    values = RealArrayContainer(count)
    ier = _iric.cg_iRIC_Read_Grid_Real_Node(name, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_Integer_Node(name):
    count = cg_iRIC_Read_Grid_NodeCount()
    values = IntArrayContainer(count)
    ier = _iric.cg_iRIC_Read_Grid_Integer_Node(name, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_Real_Cell(name):
    count = cg_iRIC_Read_Grid_CellCount()
    values = RealArrayContainer(count)
    ier = _iric.cg_iRIC_Read_Grid_Real_Cell(name, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_Integer_Cell(name):
    count = cg_iRIC_Read_Grid_CellCount()
    values = IntArrayContainer(count)
    ier = _iric.cg_iRIC_Read_Grid_Integer_Cell(name, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_FunctionalDimensionSize(name, dimname):
    ier, size = _iric.cg_iRIC_Read_Grid_FunctionalDimensionSize(name, dimname)
    _checkErrorCode(ier)
    return size

def cg_iRIC_Read_Grid_FunctionalDimension_Integer(name, dimname):
    size = cg_iRIC_Read_Grid_FunctionalDimensionSize(name, dimname)
    values = IntArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Grid_FunctionalDimension_Integer(name, dimname, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_FunctionalDimension_Real(name, dimname):
    size = cg_iRIC_Read_Grid_FunctionalDimensionSize(name, dimname)
    values = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Grid_FunctionalDimension_Real(name, dimname, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_FunctionalTimeSize(name):
    ier, size = _iric.cg_iRIC_Read_Grid_FunctionalTimeSize(name)
    _checkErrorCode(ier)
    return size

def cg_iRIC_Read_Grid_FunctionalTime(name):
    size = cg_iRIC_Read_Grid_FunctionalTimeSize(name)
    values = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Grid_FunctionalTime(name, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_Functional_Integer_Node(name, dimid):
    count = cg_iRIC_Read_Grid_NodeCount()
    values = IntArrayContainer(count)
    ier = _iric.cg_iRIC_Read_Grid_Functional_Integer_Node(name, dimid, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_Functional_Real_Node(name, dimid):
    count = cg_iRIC_Read_Grid_NodeCount()
    values = RealArrayContainer(count)
    ier = _iric.cg_iRIC_Read_Grid_Functional_Real_Node(name, dimid, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_Functional_Integer_Cell(name, dimid):
    count = cg_iRIC_Read_Grid_CellCount()
    values = IntArrayContainer(count)
    ier = _iric.cg_iRIC_Read_Grid_Functional_Integer_Cell(name, dimid, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_Read_Grid_Functional_Real_Cell(name, dimid):
    count = cg_iRIC_Read_Grid_CellCount()
    values = RealArrayContainer(count)
    ier = _iric.cg_iRIC_Read_Grid_Functional_Real_Cell(name, dimid, values)
    _checkErrorCode(ier)
    return values.get()

def cg_iRIC_WriteGridCoord1d(isize, x):
    v = RealArrayContainer(x.size)
    v.set(x)
    ier = _iric.cg_iRIC_WriteGridCoord1d(isize, v)
    _checkErrorCode(ier)

def cg_iRIC_WriteGridCoord2d(isize, jsize, x, y):
    x2 = RealArrayContainer(x.size)
    y2 = RealArrayContainer(y.size)
    x2.set(x)
    y2.set(y)
    ier = _iric.cg_iRIC_WriteGridCoord2d(isize, jsize, x2, y2)
    _checkErrorCode(ier)

def cg_iRIC_WriteGridCoord3d(isize, jsize, ksize, x, y, z):
    x2 = RealArrayContainer(x.size)
    y2 = RealArrayContainer(y.size)
    z2 = RealArrayContainer(z.size)
    x2.set(x)
    y2.set(y)
    z2.set(z)
    ier = _iric.cg_iRIC_WriteGridCoord3d(isize, jsize, ksize, x2, y2, z2)
    _checkErrorCode(ier)

def cg_iRIC_InitGrid(zoneId):
    ier = _iric.cg_iRIC_InitGrid(zoneId)
    _checkErrorCode(ier)

def cg_iRIC_Write_Grid_Real_Node(name, values):
    v = RealArrayContainer(values.size)
    v.set(values)
    ier = _iric.cg_iRIC_Write_Grid_Real_Node(name, v)
    _checkErrorCode(ier)

def cg_iRIC_Write_Grid_Integer_Node(name, values):
    v = IntArrayContainer(values.size)
    v.set(values)
    ier = _iric.cg_iRIC_Write_Grid_Integer_Node(name, v)
    _checkErrorCode(ier)

def cg_iRIC_Write_Grid_Real_Cell(name, values):
    v = RealArrayContainer(values.size)
    v.set(values)
    ier = _iric.cg_iRIC_Write_Grid_Real_Cell(name, v)
    _checkErrorCode(ier)

def cg_iRIC_Write_Grid_Integer_Cell(name, values):
    v = IntArrayContainer(values.size)
    v.set(values)
    ier = _iric.cg_iRIC_Write_Grid_Integer_Cell(name, v)
    _checkErrorCode(ier)

def cg_iRIC_Read_Sol_Count():
    ier, count = _iric.cg_iRIC_Read_Sol_Count()
    _checkErrorCode(ier)
    return count

def cg_iRIC_Read_Sol_Time(step):
    ier, time = _iric.cg_iRIC_Read_Sol_Time(step)
    _checkErrorCode(ier)
    return time

def cg_iRIC_Read_Sol_Iteration(step):
    ier, iteration = _iric.cg_iRIC_Read_Sol_Iteration(step)
    _checkErrorCode(ier)
    return iteration

def cg_iRIC_Read_Sol_BaseIterative_Integer(step, name):
    ier, value = _iric.cg_iRIC_Read_Sol_BaseIterative_Integer(step, name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_Sol_BaseIterative_Real(step, name):
    ier, value = _iric.cg_iRIC_Read_Sol_BaseIterative_Real(step, name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_Sol_BaseIterative_String(step, name):
    ier, value = _iric.cg_iRIC_Read_Sol_BaseIterative_String(step, name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_Sol_GridCoord2d(step):
    size = cg_iRIC_Read_Grid_NodeCount()
    x = RealArrayContainer(size)
    y = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_GridCoord2d(step, x, y)
    _checkErrorCode(ier)
    return (x.get(), y.get())

def cg_iRIC_Read_Sol_GridCoord3d(step):
    size = cg_iRIC_Read_Grid_NodeCount()
    x = RealArrayContainer(size)
    y = RealArrayContainer(size)
    z = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_GridCoord3d(step, x, y, z)
    _checkErrorCode(ier)
    return (x.get(), y.get(), z.get())

def cg_iRIC_Read_Sol_Integer(step, name):
    size = cg_iRIC_Read_Grid_NodeCount()
    data = IntArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_Integer(step, name, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_Sol_Cell_Integer(step, name):
    size = cg_iRIC_Read_Grid_CellCount()
    data = IntArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_Cell_Integer(step, name, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_Sol_IFace_Integer(step, name):
    size = cg_iRIC_Read_Grid_IFaceCount()
    data = IntArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_IFace_Integer(step, name, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_Sol_JFace_Integer(step, name):
    size = cg_iRIC_Read_Grid_JFaceCount()
    data = IntArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_JFace_Integer(step, name, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_Sol_Real(step, name):
    size = cg_iRIC_Read_Grid_NodeCount()
    data = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_Real(step, name, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_Sol_Cell_Real(step, name):
    size = cg_iRIC_Read_Grid_CellCount()
    data = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_Cell_Real(step, name, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_Sol_IFace_Real(step, name):
    size = cg_iRIC_Read_Grid_IFaceCount()
    data = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_IFace_Real(step, name, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_Sol_JFace_Real(step, name):
    size = cg_iRIC_Read_Grid_JFaceCount()
    data = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_Sol_JFace_Real(step, name, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Write_Sol_Time(time):
    ier = _iric.cg_iRIC_Write_Sol_Time(time)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_Iteration(index):
    ier = _iric.cg_iRIC_Write_Sol_Iteration(index)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_BaseIterative_Integer(name, value):
    ier = _iric.cg_iRIC_Write_Sol_BaseIterative_Integer(name, value)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_BaseIterative_Real(name, value):
    ier = _iric.cg_iRIC_Write_Sol_BaseIterative_Real(name, value)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_BaseIterative_String(name, strvalue):
    ier = _iric.cg_iRIC_Write_Sol_BaseIterative_String(name, strvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_GridCoord2d(x, y):
    x2 = RealArrayContainer(x.size)
    y2 = RealArrayContainer(y.size)
    x2.set(x)
    y2.set(y)
    ier = _iric.cg_iRIC_Write_Sol_GridCoord2d(x2, y2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_GridCoord3d(x, y, z):
    x2 = RealArrayContainer(x.size)
    y2 = RealArrayContainer(y.size)
    z2 = RealArrayContainer(z.size)
    x2.set(x)
    y2.set(y)
    z2.set(z)
    ier = _iric.cg_iRIC_Write_Sol_GridCoord3d(x2, y2, z2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_Integer(name, data):
    data2 = IntArrayContainer(data.size)
    data2.set(data)
    ier = _iric.cg_iRIC_Write_Sol_Integer(name, data2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_Cell_Integer(name, data):
    data2 = IntArrayContainer(data.size)
    data2.set(data)
    ier = _iric.cg_iRIC_Write_Sol_Cell_Integer(name, data2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_IFace_Integer(name, data):
    data2 = IntArrayContainer(data.size)
    data2.set(data)
    ier = _iric.cg_iRIC_Write_Sol_IFace_Integer(name, data2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_JFace_Integer(name, data):
    data2 = IntArrayContainer(data.size)
    data2.set(data)
    ier = _iric.cg_iRIC_Write_Sol_JFace_Integer(name, data2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_Real(name, data):
    data2 = RealArrayContainer(data.size)
    data2.set(data)
    ier = _iric.cg_iRIC_Write_Sol_Real(name, data2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_Cell_Real(name, data):
    data2 = RealArrayContainer(data.size)
    data2.set(data)
    ier = _iric.cg_iRIC_Write_Sol_Cell_Real(name, data2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_IFace_Real(name, data):
    data2 = RealArrayContainer(data.size)
    data2.set(data)
    ier = _iric.cg_iRIC_Write_Sol_IFace_Real(name, data2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_JFace_Real(name, data):
    data2 = RealArrayContainer(data.size)
    data2.set(data)
    ier = _iric.cg_iRIC_Write_Sol_JFace_Real(name, data2)
    _checkErrorCode(ier)

def cg_iRIC_Write_ErrorCode(errorcode):
    ier = _iric.cg_iRIC_Write_ErrorCode(errorcode)
    _checkErrorCode(ier)

def cg_iRIC_Init_BC_Names():
    ier = _iric.cg_iRIC_Init_BC_Names()
    _checkErrorCode(ier)

def cg_iRIC_Read_BC_Count(type):
    return _iric.cg_iRIC_Read_BC_Count(type)

def cg_iRIC_Read_BC_IndicesSize2(type, num):
    ier, size = _iric.cg_iRIC_Read_BC_IndicesSize2(type, num)
    _checkErrorCode(ier)
    return size

def cg_iRIC_Read_BC_Indices(type, num):
    size = cg_iRIC_Read_BC_IndicesSize2(type, num)
    indices = IntArrayContainer(size)
    ier = _iric.cg_iRIC_Read_BC_Indices(type, num, indices)
    _checkErrorCode(ier)
    return indices.get()

def cg_iRIC_Read_BC_Integer(type, num, name):
    ier, value = _iric.cg_iRIC_Read_BC_Integer(type, num, name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_BC_Real(type, num, name):
    ier, value = _iric.cg_iRIC_Read_BC_Real(type, num, name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_BC_String(type, num, name):
    ier, value = _iric.cg_iRIC_Read_BC_String(type, num, name)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Read_BC_FunctionalSize(type, num, name):
    ier, size = _iric.cg_iRIC_Read_BC_FunctionalSize(type, num, name)
    _checkErrorCode(ier)
    return size

def cg_iRIC_Read_BC_Functional(type, num, name):
    size = cg_iRIC_Read_BC_FunctionalSize(type, num, name)
    x = RealArrayContainer(size)
    y = RealArrayContainer(size)

    ier = _iric.cg_iRIC_Read_BC_Functional(type, num, name, x, y)
    _checkErrorCode(ier)
    return (x.get(), y.get())

def cg_iRIC_Read_BC_FunctionalWithName(type, num, name, paramname):
    size = cg_iRIC_Read_BC_FunctionalSize(type, num, name)
    data = RealArrayContainer(size)
    ier = _iric.cg_iRIC_Read_BC_FunctionalWithName(type, num, name, paramname, data)
    _checkErrorCode(ier)
    return data.get()

def cg_iRIC_Read_BC_FunctionalWithName_String(type, num, name, paramname):
    ier, value = _iric.cg_iRIC_Read_BC_FunctionalWithName_String(type, num, name, paramname)
    _checkErrorCode(ier)
    return value

def cg_iRIC_Clear_BC():
    ier = _iric.cg_iRIC_Clear_BC()
    _checkErrorCode(ier)

def cg_iRIC_Write_BC_Indices(type, num, indices):
    d = IntArrayContainer(indices.size)
    d.set(indices)
    ier = _iric.cg_iRIC_Write_BC_Indices(type, num, d)
    _checkErrorCode(ier)

def cg_iRIC_Write_BC_Integer(type, num, name, intvalue):
    ier = _iric.cg_iRIC_Write_BC_Integer(type, num, name, intvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_BC_Real(type, num, name, realvalue):
    ier = _iric.cg_iRIC_Write_BC_Real(type, num, name, realvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_BC_String(type, num, name, strvalue):
    ier = _iric.cg_iRIC_Write_BC_String(type, num, name, strvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_BC_Functional(type, num, name, realarray_x, realarray_y):
    x = RealArrayContainer(realarray_x.size)
    y = RealArrayContainer(realarray_y.size)
    x.set(realarray_x)
    y.set(realarray_y)
    ier = _iric.cg_iRIC_Write_BC_Functional(type, num, name, x, y)
    _checkErrorCode(ier)

def cg_iRIC_Write_BC_FunctionalWithName(type, num, name, paramname, data):
    d = RealArrayContainer(data.size)
    d.set(data)
    ier = _iric.cg_iRIC_Write_BC_FunctionalWithName(type, num, name, paramname, d)
    _checkErrorCode(ier)

def cg_iRIC_Write_BC_FunctionalWithName_String(type, num, name, paramname, strvalue):
    ier = _iric.cg_iRIC_Write_BC_FunctionalWithName_String(type, num, name, paramname, strvalue)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_Particle_Pos2d(x, y):
    x2 = RealArrayContainer(x.size)
    y2 = RealArrayContainer(y.size)
    x2.set(x)
    y2.set(y)
    ier = _iric.cg_iRIC_Write_Sol_Particle_Pos2d(x2, y2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_Particle_Pos3d(x, y, z):
    x2 = RealArrayContainer(x.size)
    y2 = RealArrayContainer(y.size)
    z2 = RealArrayContainer(z.size)
    x2.set(x)
    y2.set(y)
    z2.set(z)
    ier = _iric.cg_iRIC_Write_Sol_Particle_Pos3d(x2, y2, z2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_Particle_Real(name, value):
    value2 = RealArrayContainer(value.size)
    value2.set(value)
    ier = _iric.cg_iRIC_Write_Sol_Particle_Real(name, value2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_Particle_Integer(name, value):
    value2 = IntArrayContainer(value.size)
    value2.set(value)
    ier = _iric.cg_iRIC_Write_Sol_Particle_Integer(name, value2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_ParticleGroup_GroupBegin(name):
    ier = _iric.cg_iRIC_Write_Sol_ParticleGroup_GroupBegin(name)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_ParticleGroup_GroupEnd():
    ier = _iric.cg_iRIC_Write_Sol_ParticleGroup_GroupEnd()
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_ParticleGroup_Pos2d(x, y):
    ier = _iric.cg_iRIC_Write_Sol_ParticleGroup_Pos2d(x, y)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_ParticleGroup_Pos3d(x, y, z):
    ier = _iric.cg_iRIC_Write_Sol_ParticleGroup_Pos3d(x, y, z)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_ParticleGroup_Integer(name, value):
    ier = _iric.cg_iRIC_Write_Sol_ParticleGroup_Integer(name, value)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_ParticleGroup_Real(name, value):
    ier = _iric.cg_iRIC_Write_Sol_ParticleGroup_Real(name, value)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_PolyData_GroupBegin(name):
    ier = _iric.cg_iRIC_Write_Sol_PolyData_GroupBegin(name)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_PolyData_GroupEnd():
    ier = _iric.cg_iRIC_Write_Sol_PolyData_GroupEnd()
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_PolyData_Polygon(x, y):
    x2 = RealArrayContainer(x.size)
    y2 = RealArrayContainer(y.size)
    x2.set(x)
    y2.set(y)
    ier = _iric.cg_iRIC_Write_Sol_PolyData_Polygon(x2, y2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_PolyData_Polyline(x, y):
    x2 = RealArrayContainer(x.size)
    y2 = RealArrayContainer(y.size)
    x2.set(x)
    y2.set(y)
    ier = _iric.cg_iRIC_Write_Sol_PolyData_Polyline(x2, y2)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_PolyData_Integer(name, value):
    ier = _iric.cg_iRIC_Write_Sol_PolyData_Integer(name, value)
    _checkErrorCode(ier)

def cg_iRIC_Write_Sol_PolyData_Real(name, value):
    ier = _iric.cg_iRIC_Write_Sol_PolyData_Real(name, value)
    _checkErrorCode(ier)
